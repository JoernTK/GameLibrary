package de.wald_ohne_blaetter.gamelibrary.game;

import java.math.BigDecimal;
import java.util.Date;

import de.wald_ohne_blaetter.gamelibrary.address.Address;
import de.wald_ohne_blaetter.gamelibrary.gamegenre.GameGenre;
import de.wald_ohne_blaetter.gamelibrary.player.Player;
import de.wald_ohne_blaetter.gamelibrary.publisher.Publisher;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * Represents a game in the game library.
 * <p>
 * This class is used as a JPA entity to store relevant information about a game.
 * </p>
 *
 * @author Joern Klassen
 * @version 0.0.1
 * @since 2025-03-21
 */
@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString(exclude = "price")
public class Game
{

  /**
   * Unique ID of the game. Automatically generated by the database
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long game_id;

  /**
   * Name of the game. Must not be null or empty
   */
  private String game_name;

  /**
   * Date of the release of the game. Can be null or empty
   */
  private Date game_release_date;

  /**
   * Unique ID of a publisher. Automatically generated by the database
   */
  @ManyToOne
  @JoinColumn(name = "publisher_id")
  private Publisher publisher_id;

  /**
   * Price of the game. Stored as {@link BigDecimal} to avoid rounding errors
   */
  private BigDecimal game_price;

  /**
   * Source or link were the game was bought
   */
  private String game_link;

  /**
   * Unique PlayerID of the owner of the game
   * Automatically generated by the database
   */
  @ManyToOne
  @JoinColumn(name = "player_id")
  private Player player_id;

  /**
   * The time that is needed to finish the game referring to the box-information's
   */
  private Integer game_length;

  /**
   * The time that is needed to finish the game referring to the players experience
   */
  private Integer game_experience_length;

  /**
   * The Space of the playing field. The size represents how big the Table needs to be. Can be null
   */
  private Integer game_playing_field;

  /**
   * The size of the game packed in a box
   */
  private Integer game_box_size;

  /**
   * The maximum count of players the game allows
   */
  private Integer game_max_players;

  /**
   * The minimum count of players the game requires
   */
  private Integer game_min_players;

  /**
   * The optimal maximum count of players
   * Some games are better to play with fewer or more players than the maximum or minimum count
   */
  private Integer game_optimal_max_players;

  /**
   * The optimal minimum count of players
   * Some games are better to play with fewer or more players than the maximum or minimum count
   */
  private Integer game_optimal_min_players;

  /**
   * Is the game a cooperative game?
   */
  private Boolean game_is_cooperative;

  /**
   * The ID of the Address where the game is located
   * Imported as a foreign key
   */
  @ManyToOne
  @JoinColumn(name = "address_id")
  private Address address_id;

  /**
   * Genre ID of the game
   * Imported as a foreign key
   */
  @ManyToMany
  @JoinColumn(name = "genre_id")
  private GameGenre genre_id;

  /**
   * who wishes to play this game?
   * Can this also be the unique player ID?
   */

  /**
   * Is this game only playable once?
   */
  private Boolean game_is_exit_game;

  /**
   * Notes about a game
   */
  private String game_notes;

}
